{"id":2482,"date":"2015-04-21T06:05:02","date_gmt":"2015-04-21T04:05:02","guid":{"rendered":"http:\/\/stepansuvorov.com\/blog\/?p=2482"},"modified":"2015-04-20T23:10:15","modified_gmt":"2015-04-20T21:10:15","slug":"angularjs-concept-diagram","status":"publish","type":"post","link":"https:\/\/stepansuvorov.com\/blog\/2015\/04\/angularjs-concept-diagram\/","title":{"rendered":"AngularJS Concept Diagram"},"content":{"rendered":"<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone  wp-image-2497\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2015\/03\/8A1\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.png\" alt=\"Angular concepts\" width=\"279\" height=\"279\" \/><\/p>\n<p>2 years ago you <a title=\"http:\/\/www.ilinsky.com\/\" href=\"http:\/\/www.ilinsky.com\/\">Sergey<\/a> asked me to create <strong>AngularJs Concept Diagram<\/strong>, and finally I have enough knowledge and time to do this task.\u00a0Better late than never.<\/p>\n<p><!--more--><\/p>\n<p>After many hours of going back and forth in source code of AngularJS I think I came to understanding all the concepts of framework and their interactions. So the simplified diagram is not complex at all:<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-2537\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2015\/04\/page11.png\" alt=\"Angular concepts simplified\" width=\"729\" height=\"413\" \/><\/p>\n<p>All based on <a title=\"wiki\" href=\"http:\/\/en.wikipedia.org\/wiki\/Dependency_injection\">Dependency Injection<\/a>(DI) approach and the instances of DI are AngularJS Services. The main 3 of them: <strong>Scope<\/strong>, <strong>Directive<\/strong>, <strong>Compile<\/strong>. <strong>Compile<\/strong> is a service, it&#8217;s obvious. Yes, <strong>Scope<\/strong> <a title=\"github\" href=\"https:\/\/github.com\/angular\/angular.js\/blob\/master\/src\/ng\/rootScope.js#L70\">is also service<\/a>.\u00a0<strong>Directive<\/strong> constructor\u00a0itself is just method of <strong>Compile<\/strong> service(that is linked to <strong>yourModule.directive<\/strong>), but when you create new directive instance it will be <a title=\"github\" href=\"https:\/\/github.com\/angular\/angular.js\/blob\/master\/src\/ng\/compile.js#L829\">still a service<\/a>, just with specific suffix. And <strong>controller<\/strong> (which is <strong>ngController<\/strong>) is <a title=\"github.com\" href=\"https:\/\/github.com\/angular\/angular.js\/blob\/master\/src\/ng\/directive\/ngController.js#L229\">just a directive<\/a>, one from the set that AngularJS provided from the box.<\/p>\n<p>Lets have a look on concepts list from <a href=\"https:\/\/docs.angularjs.org\/guide\/concepts\">official tutorial<\/a>:<\/p>\n<table class=\"ng-scope table table-bordered table-striped code-table\">\n<thead>\n<tr>\n<th>Concept<\/th>\n<th>Description<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#template\">Template<\/a><\/td>\n<td>HTML with additional markup<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#directive\">Directives<\/a><\/td>\n<td>extend HTML with custom attributes and elements<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#model\">Model<\/a><\/td>\n<td>the data shown to the user in the view and with which the user interacts<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#scope\">Scope<\/a><\/td>\n<td>context where the model is stored so that controllers, directives and expressions can access it<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#expression\">Expressions<\/a><\/td>\n<td>access variables and functions from the scope<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#compiler\">Compiler<\/a><\/td>\n<td>parses the template and instantiates directives and expressions<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#filter\">Filter<\/a><\/td>\n<td>formats the value of an expression for display to the user<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#view\">View<\/a><\/td>\n<td>what the user sees (the DOM)<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#databinding\">Data Binding<\/a><\/td>\n<td>sync data between the model and the view<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#controller\">Controller<\/a><\/td>\n<td>the business logic behind views<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#di\">Dependency Injection<\/a><\/td>\n<td>Creates and wires objects and functions<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#injector\">Injector<\/a><\/td>\n<td>dependency injection container<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#module\">Module<\/a><\/td>\n<td>a container for the different parts of an app including controllers, services, filters, directives which configures the Injector<\/td>\n<\/tr>\n<tr>\n<td><a href=\"https:\/\/docs.angularjs.org\/guide\/concepts#service\">Service<\/a><\/td>\n<td>reusable business logic independent of views<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>We already have <strong>DI<\/strong>, <strong>Compiler<\/strong>, <strong>Directives<\/strong>, <strong>Scope<\/strong>, <strong>Service<\/strong>. Let&#8217;s extend our diagram little bit:<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-2511\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2015\/04\/page1_extended1.png\" alt=\"angular_concepts_extended\" width=\"756\" height=\"566\" \/><\/p>\n<p>Here I specify that <strong>DI<\/strong> concept is made by <strong>Injector<\/strong> entity. Services are\u00a0grouped in <strong>modules<\/strong>. Base module of Angular is <strong><a title=\"github\" href=\"https:\/\/github.com\/angular\/angular.js\/tree\/master\/src\/ng\">ng<\/a><\/strong>, where you could find all the &#8220;native&#8221; services and directives(I call it ngModule on diagram to make more clear). Examples of another modules provided by AngularJS are ngRoute, ngAnimate,\u00a0ngSanitize,\u00a0ngCookies and others.<\/p>\n<p>I marked out that <strong>Scope<\/strong> is kind of <strong>Model<\/strong> in AngularJS.<\/p>\n<p><strong>View<\/strong> is presented like extended <strong>HTML<\/strong>(extended by expressions and directives). Html is analysed and compiled back with <strong>Scope<\/strong> data by <strong>Compile<\/strong> service: <a title=\"github\" href=\"https:\/\/github.com\/angular\/angular.js\/blob\/master\/src\/Angular.js#L1515\">starting from the app root element<\/a> recursively to each nested directive. Directives can use\u00a0<strong>Templates<\/strong> which are also in extended HTML format.<\/p>\n<p>I think that the concepts like <strong>digest<\/strong> and <strong>watchers<\/strong> are unfairly skipped in the main list. Let&#8217;s look at Scope concept in detail:<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone  wp-image-2520\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2015\/04\/scope.png\" alt=\"scope concept\" width=\"252\" height=\"217\" \/><\/p>\n<p>Each <strong>Scope<\/strong> instance (<strong>$scope<\/strong> on diagram) has array of <strong>watchers<\/strong>, <strong>$watch()<\/strong> method to add new watcher and <strong>$digest()<\/strong> method to control\u00a0the watchers.<\/p>\n<p>We have array of watchers, but what is watcher itself?<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone  wp-image-2521\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2015\/04\/watcher.png\" alt=\"watcher concept\" width=\"390\" height=\"190\" \/><\/p>\n<p>Watcher is just an object with 3 basic properties:<\/p>\n<ul>\n<li>listener &#8211; observable entity (could be object property, expression(string) or function)<\/li>\n<li>old value &#8211; stored value to compare with new one<\/li>\n<li>callback &#8211; function to call in case if output of listener and old value do not match<\/li>\n<\/ul>\n<p>So <strong>watcher<\/strong> is just an object with special properties. All operations over watchers are executed by <strong>$digest<\/strong> method. It goes threw all the watchers,\u00a0compare values: stored and listener actual and execute callbacks if the values are not equal.<\/p>\n<p>And now we come back to\u00a0general\u00a0diagram:<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-2538\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2015\/04\/page1_extended22.png\" alt=\"Angular Concept Diagram\" width=\"844\" height=\"557\" \/><\/p>\n<p>I&#8217;ve added last concept from the list &#8211; <strong>Data Binding<\/strong>. It&#8217;s made on watchers. Each view binding with a scope &#8211; it&#8217;s just one more watcher to the watchers list of this scope(or two watchers in case of <strong>Two Way Binding<\/strong>). When some of scope properties\u00a0have been changed it will make corresponding\u00a0watchers &#8220;<em>dirty<\/em>&#8221; &#8211; it means that listener value and old value are not equal now. And with new <strong>digest cycle<\/strong> ($digest method call) dirty watchers will be updated(and their callbacks will be executed). Digest cycle will last till all the watchers are clean. That why it has well known name &#8220;dirty checking&#8221;.<\/p>\n<p>I tried to put all the concepts with their dependencies on diagram and keep it as clear as possible. Hope it will be helpful for you.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>2 years ago you Sergey asked me to create AngularJs Concept Diagram, and finally I have enough knowledge and time to do this task.\u00a0Better late than never.<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[4],"tags":[120,368,17],"_links":{"self":[{"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/posts\/2482"}],"collection":[{"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/comments?post=2482"}],"version-history":[{"count":14,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/posts\/2482\/revisions"}],"predecessor-version":[{"id":2539,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/posts\/2482\/revisions\/2539"}],"wp:attachment":[{"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/media?parent=2482"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/categories?post=2482"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/tags?post=2482"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}