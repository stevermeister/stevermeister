{"id":3399,"date":"2017-07-07T19:50:24","date_gmt":"2017-07-07T17:50:24","guid":{"rendered":"http:\/\/stepansuvorov.com\/blog\/?p=3399"},"modified":"2017-11-11T10:06:22","modified_gmt":"2017-11-11T08:06:22","slug":"angularcamp-2017-notes","status":"publish","type":"post","link":"https:\/\/stepansuvorov.com\/blog\/2017\/07\/angularcamp-2017-notes\/","title":{"rendered":"AngularCamp 2017, notes"},"content":{"rendered":"<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone size-full wp-image-3406\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2017\/07\/IMG-4c24743ce80cbbd8723a28eec0a6c01c-V.jpg\" alt=\"\" width=\"1210\" height=\"680\" \/><\/p>\n<p>I had I chance to visit <strong><a href=\"https:\/\/angularcamp.org\">AngularCamp<\/a><\/strong>\u00a0these days and would like to share some thoughts\/notes with you.<\/p>\n<p><!--more--><\/p>\n<h2>Todd Motto &amp;\u00a0James Henry\u00a0&#8211; From imperative to reactive thinking (<a href=\"https:\/\/speakerdeck.com\/toddmotto\/from-imperative-to-reactive-thinking\">slides<\/a>)<\/h2>\n<p>Todd showed 2 great examples of streams of real world.<\/p>\n<p>Bulbs that subscribed to one switch:<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone wp-image-3408\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2017\/07\/Screen-Shot-2017-07-10-at-22.01.25.png\" alt=\"\" width=\"173\" height=\"186\" \/><\/p>\n<p>and coffee machine that makes different sorts of coffee out of water:<\/p>\n<p><img decoding=\"async\" loading=\"lazy\" class=\"alignnone wp-image-3409\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2017\/07\/Screen-Shot-2017-07-10-at-22.02.57.png\" alt=\"\" width=\"236\" height=\"160\" \/><\/p>\n<p>Next part was about comparing\u00a0<strong>Imperative<\/strong> and <strong>Reactive<\/strong> approaches base on &#8220;game of throwing the ball&#8221; implementation.<\/p>\n<p><em>Well&#8230; IMHO<\/em><\/p>\n<p><strong>Imperative<\/strong>: too much code, really difficult to follow<\/p>\n<p><strong>Reactive<\/strong>: got lost even knowing how to work with Rxjs<\/p>\n<p>&nbsp;<\/p>\n<h2>Dmitriy Shekhovtsov &#8211; Unleash The Power Of Angular With Knowledge of Patterns<\/h2>\n<p>Dmitriy started naming the patterns that everybody knows: <a href=\"https:\/\/en.wikipedia.org\/wiki\/Singleton_pattern\">singleton<\/a>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Factory_(object-oriented_programming)\">factory<\/a>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Publish%E2%80%93subscribe_pattern\">pub\/sub<\/a>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Adapter_pattern\">adapter<\/a> to warmup audience, after continued with: <a href=\"https:\/\/en.wikipedia.org\/wiki\/Dependency_injection\">DI<\/a>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Module_pattern\">module<\/a>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Inversion_of_control\">IoC<\/a>, \u00a0<a href=\"https:\/\/en.wikipedia.org\/wiki\/Command%E2%80%93query_separation\">CQRS<\/a> to make some JS developers exited about new words.<\/p>\n<p>Then he presented <strong>Dependancy injection<\/strong> pattern and provided 2 examples: with a fridge where parents &#8220;inject&#8221; food for the child and with carbonara that you don&#8217;t need to take care about ingredients. Frankly speaking, both examples highlighted an encapsulation principle more than DI. After he should how Angular code would look like without DI. I think it would be better to highlight the power of flexibility that DI provides you, instead of showing that<\/p>\n<p><strong>Module pattern<\/strong> was next one. Dmitriy highlighted that even with EcmaScript2015+ with native modules we still have to compile it to an old school function wrapper. Some good reasons why to use this pattern:<\/p>\n<ul>\n<li>namespaces<\/li>\n<li>encapsulation<\/li>\n<li>structured code<\/li>\n<li>manage dependancy<\/li>\n<\/ul>\n<p>and after he compared it to <strong>ngModules<\/strong>: import, export, providers.<\/p>\n<p>Also Dmitriy provided interesting idea to split you <strong>SharedModule<\/strong> into 2: to put all you services separately. In this case you would not need <strong>forRoot<\/strong>\/<strong>forChild<\/strong> approach.<\/p>\n<p>Next one was a <strong>Change Detection<\/strong> pattern. Some explanation about Javascript types and memory allocation, and &#8220;<em>why the code worked in AngularJs and doesn&#8217;t work in Angular<\/em>&#8220;. The answer is <strong>strict equality<\/strong>.<\/p>\n<p>Several more words about immutability, pure functions and single responsibility.<\/p>\n<h2>Simona Cotin &amp; Artur Daschevici &#8211; From Angular to React and back again<\/h2>\n<p>Simona and Artur provided kind of comparison for <strong>Angular<\/strong> and <strong>React<\/strong>(yes, yet another comparison ;) )<\/p>\n<p>Simona started with Angular history, and told us what things had pushed AngularJs to be Angular:<\/p>\n<ul>\n<li>ES6<\/li>\n<li>Web components<\/li>\n<li>React<\/li>\n<li>RxJS<\/li>\n<li>Typescript<\/li>\n<li>EmberCli<\/li>\n<\/ul>\n<p>and also, of course, it was a time for performance changes. so now we have:<\/p>\n<ul>\n<li>lazy loading<\/li>\n<li>AoT<\/li>\n<li>tree shaking<\/li>\n<\/ul>\n<p>Then\u00a0Artur took the floor and told us some parts of React:<\/p>\n<ul>\n<li>component based<\/li>\n<li>predictable state management<\/li>\n<li>ES6<\/li>\n<li>Flow<\/li>\n<li>Virtual DOM<\/li>\n<\/ul>\n<p>Then they compared\u00a0CLI tools and component declaration and tools for each framework.<\/p>\n<p>Issues Angular:<\/p>\n<ul>\n<li>migration\n<ul>\n<li>Angular Style Guide<\/li>\n<li>TypeScript<\/li>\n<li>UpgradeModule<\/li>\n<li>Upgrade cheatsheet<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>issues React:<\/p>\n<ul>\n<li>unmanageble large app<\/li>\n<li>state management<\/li>\n<li>no unified way of doing things<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<h2>Victor Savkin &#8211; State Management Patterns and Best Practices with NgRxb<\/h2>\n<p>too much code for 4th talk without break&#8230; it looked like Viktor wanted to put 4 hours talk in 40 minutes&#8230;.<\/p>\n<p>* I&#8217;ll rewatch video one more time and will return back to you with more information about this topic.<\/p>\n<p>Also Victor several times during the talk recommended this book:<\/p>\n<p><a href=\"https:\/\/books.google.nl\/books\/about\/Enterprise_Integration_Patterns.html?id=bUlsAQAAQBAJ&amp;printsec=frontcover&amp;source=kp_read_button&amp;redir_esc=y#v=onepage&amp;q&amp;f=false\"><img decoding=\"async\" loading=\"lazy\" class=\"alignnone wp-image-3411\" src=\"https:\/\/stepansuvorov.com\/blog\/wp-content\/uploads\/2017\/07\/images.jpg\" alt=\"\" width=\"184\" height=\"238\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Martin Splitt &#8211; Virtual Reality with A-Frame<\/h2>\n<p>Quite inspiring talk: Martin not only showed how to make VR in Javascript with help of simple library but also make all audience laugh.<\/p>\n<p>He started with some examples of VR<\/p>\n<ul>\n<li><a href=\"https:\/\/www.youtube.com\/watch?v=TckqNdrdbgk\">Tilt Brush: Painting from a new perspective<\/a><\/li>\n<li><a href=\"https:\/\/www.youtube.com\/watch?v=SCrkZOx5Q1M\">Google Earth VR \u2014 Bringing the whole wide world to virtual reality<\/a><\/li>\n<\/ul>\n<p>Compared different modern VR devices.<\/p>\n<p>Explained How VR works.<\/p>\n<p>I a bit of VR live coding with <a href=\"https:\/\/aframe.io\"><strong>a-frame<\/strong><\/a> library.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>Filip Bech-Larsen &#8211; Building dynamic SPA website<\/strong><\/p>\n<p>Filip showed results of his research how to build Angular over existing CMS: to use all management tools for content creation and editing and same time present it like SPA.<\/p>\n<h1>Pascal Precht &#8211; Angular and Service Workers<\/h1>\n<p>Progressive web apps (<a href=\"https:\/\/developers.google.com\/web\/tools\/lighthouse\/\">lighthouse<\/a> &#8211; to check whether you app is progressive enough)<\/p>\n<p>Service workers<\/p>\n<p>Angular Service Worker<\/p>\n<ul>\n<li>install @angular\/serviceworker<\/li>\n<li>angular-cli \u00a0serverWorker: true<\/li>\n<li>sw-register<\/li>\n<li>ngsw-manifest<\/li>\n<li>dynamic routing<\/li>\n<\/ul>\n<h1>Carmen Popoviciu &#8211;\u00a0A moment&#8217;s reflection<\/h1>\n<p>Deep psychological talk about developer beings from Carmen that was nicely combined with Martin Splitt jokes.<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>I had I chance to visit AngularCamp\u00a0these days and would like to share some thoughts\/notes with you.<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[4],"tags":[185,486],"_links":{"self":[{"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/posts\/3399"}],"collection":[{"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/comments?post=3399"}],"version-history":[{"count":9,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/posts\/3399\/revisions"}],"predecessor-version":[{"id":3469,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/posts\/3399\/revisions\/3469"}],"wp:attachment":[{"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/media?parent=3399"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/categories?post=3399"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/stepansuvorov.com\/blog\/wp-json\/wp\/v2\/tags?post=3399"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}